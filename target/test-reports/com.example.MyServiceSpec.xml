<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="fret-Extensa-7630G" name="com.example.MyServiceSpec" tests="3" errors="0" failures="1" time="-0.003">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/i386"/><property name="java.vm.version" value="25.45-b02"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="java.vm.name" value="OpenJDK Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="US"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/home/fret/practica/spray-template-on_spray-can_1.3_scala-2.11"/><property name="java.runtime.version" value="1.8.0_45-internal-b14"/><property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/><property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/endorsed"/><property name="os.arch" value="i386"/><property name="java.io.tmpdir" value="/tmp"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Linux"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="java.library.path" value="/usr/java/packages/lib/i386:/usr/lib/i386-linux-gnu/jni:/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot Tiered Compilers"/><property name="os.version" value="3.19.0-21-generic"/><property name="user.home" value="/home/fret"/><property name="user.timezone" value="Europe/Chisinau"/><property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/usr/share/sbt-launcher-packaging/bin/sbt-launch.jar:/usr/share/java/jayatanaag.jar"/><property name="user.name" value="fret"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/usr/share/sbt-launcher-packaging/bin/sbt-launch.jar"/><property name="java.home" value="/usr/lib/jvm/java-8-openjdk-i386/jre"/><property name="sun.arch.data.model" value="32"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.X11.XToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_45-internal"/><property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/ext:/usr/java/packages/lib/ext"/><property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-i386/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sun.desktop" value="gnome"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="com.example.MyServiceSpec" name="(It is not a test)" time="-0.001">
                                                 <failure message="'&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
    &lt;title&gt;JBrowse&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;genome.css&quot;&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;src/dojo/dojo.js&quot; data-dojo-config=&quot;async: 1, baseUrl: './src'&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;src/JBrowse/init.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;text/javascript&quot;&gt;
        window.onerror=function(msg){
            if( document.body )
                document.body.setAttribute(&quot;JSError&quot;,msg);
        }

        // puts the main Browser object in this for convenience.  feel
        // free to move it into function scope if you want to keep it
        // out of the global namespace
        var JBrowse;
        require(['JBrowse/Browser', 'dojo/io-query', 'dojo/json' ],
             function (Browser,ioQuery,JSON) {
                   // the initial configuration of this JBrowse
                   // instance

                   // NOTE: this initial config is the same as any
                   // other JBrowse config in any other file.  this
                   // one just sets defaults from URL query params.
                   // If you are embedding JBrowse in some other app,
                   // you might as well just set this initial config
                   // to something like { include: '../my/dynamic/conf.json' },
                   // or you could put the entire
                   // dynamically-generated JBrowse config here.

                   // parse the query vars in the page URL
                   var queryParams = ioQuery.queryToObject( window.location.search.slice(1) );

                   var config = {
                       containerID: &quot;GenomeBrowser&quot;,

                       dataRoot: queryParams.data,
                       queryParams: queryParams,
                       location: queryParams.loc,
                       forceTracks: queryParams.tracks,
                       initialHighlight: queryParams.highlight,
                       show_nav: queryParams.nav,
                       show_tracklist: queryParams.tracklist,
                       show_overview: queryParams.overview,
                       show_menu: queryParams.menu,
                       stores: { url: { type: &quot;JBrowse/Store/SeqFeature/FromConfig&quot;, features: [] } },
                       makeFullViewURL: function( browser ) {

                           // the URL for the 'Full view' link
                           // in embedded mode should be the current
                           // view URL, except with 'nav', 'tracklist',
                           // and 'overview' parameters forced to 1.

                           return browser.makeCurrentViewURL({ nav: 1, tracklist: 1, overview: 1 });
                       },
                       updateBrowserURL: true
                   };

                   //if there is ?addFeatures in the query params,
                   //define a store for data from the URL
                   if( queryParams.addFeatures ) {
                       config.stores.url.features = JSON.parse( queryParams.addFeatures );
                   }

                   // if there is ?addTracks in the query params, add
                   // those track configurations to our initial
                   // configuration
                   if( queryParams.addTracks ) {
                       config.tracks = JSON.parse( queryParams.addTracks );
                   }

                   // if there is ?addStores in the query params, add
                   // those store configurations to our initial
                   // configuration
                   if( queryParams.addStores ) {
                       config.stores = JSON.parse( queryParams.addStores );
                   }

                   // create a JBrowse global variable holding the JBrowse instance
                   JBrowse = new Browser( config );
        });
    &lt;/script&gt;

  &lt;/head&gt;

  &lt;body&gt;
    &lt;div id=&quot;GenomeBrowser&quot; style=&quot;height: 100%; width: 100%; padding: 0; border: 0;&quot;&gt;&lt;/div&gt;
    &lt;div style=&quot;display: none&quot;&gt;JBrowseDefaultMainPage&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
' doesn't contain 'Say hello'" type="java.lang.Exception">java.lang.Exception: '&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
    &lt;title&gt;JBrowse&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;genome.css&quot;&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;src/dojo/dojo.js&quot; data-dojo-config=&quot;async: 1, baseUrl: './src'&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;src/JBrowse/init.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;text/javascript&quot;&gt;
        window.onerror=function(msg){
            if( document.body )
                document.body.setAttribute(&quot;JSError&quot;,msg);
        }

        // puts the main Browser object in this for convenience.  feel
        // free to move it into function scope if you want to keep it
        // out of the global namespace
        var JBrowse;
        require(['JBrowse/Browser', 'dojo/io-query', 'dojo/json' ],
             function (Browser,ioQuery,JSON) {
                   // the initial configuration of this JBrowse
                   // instance

                   // NOTE: this initial config is the same as any
                   // other JBrowse config in any other file.  this
                   // one just sets defaults from URL query params.
                   // If you are embedding JBrowse in some other app,
                   // you might as well just set this initial config
                   // to something like { include: '../my/dynamic/conf.json' },
                   // or you could put the entire
                   // dynamically-generated JBrowse config here.

                   // parse the query vars in the page URL
                   var queryParams = ioQuery.queryToObject( window.location.search.slice(1) );

                   var config = {
                       containerID: &quot;GenomeBrowser&quot;,

                       dataRoot: queryParams.data,
                       queryParams: queryParams,
                       location: queryParams.loc,
                       forceTracks: queryParams.tracks,
                       initialHighlight: queryParams.highlight,
                       show_nav: queryParams.nav,
                       show_tracklist: queryParams.tracklist,
                       show_overview: queryParams.overview,
                       show_menu: queryParams.menu,
                       stores: { url: { type: &quot;JBrowse/Store/SeqFeature/FromConfig&quot;, features: [] } },
                       makeFullViewURL: function( browser ) {

                           // the URL for the 'Full view' link
                           // in embedded mode should be the current
                           // view URL, except with 'nav', 'tracklist',
                           // and 'overview' parameters forced to 1.

                           return browser.makeCurrentViewURL({ nav: 1, tracklist: 1, overview: 1 });
                       },
                       updateBrowserURL: true
                   };

                   //if there is ?addFeatures in the query params,
                   //define a store for data from the URL
                   if( queryParams.addFeatures ) {
                       config.stores.url.features = JSON.parse( queryParams.addFeatures );
                   }

                   // if there is ?addTracks in the query params, add
                   // those track configurations to our initial
                   // configuration
                   if( queryParams.addTracks ) {
                       config.tracks = JSON.parse( queryParams.addTracks );
                   }

                   // if there is ?addStores in the query params, add
                   // those store configurations to our initial
                   // configuration
                   if( queryParams.addStores ) {
                       config.stores = JSON.parse( queryParams.addStores );
                   }

                   // create a JBrowse global variable holding the JBrowse instance
                   JBrowse = new Browser( config );
        });
    &lt;/script&gt;

  &lt;/head&gt;

  &lt;body&gt;
    &lt;div id=&quot;GenomeBrowser&quot; style=&quot;height: 100%; width: 100%; padding: 0; border: 0;&quot;&gt;&lt;/div&gt;
    &lt;div style=&quot;display: none&quot;&gt;JBrowseDefaultMainPage&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
' doesn't contain 'Say hello'
	at com.example.MyServiceSpec$$anonfun$1$$anonfun$apply$2$$anonfun$apply$3.apply(MyServiceSpec.scala:15)
	at com.example.MyServiceSpec$$anonfun$1$$anonfun$apply$2$$anonfun$apply$3.apply(MyServiceSpec.scala:15)
	at spray.testkit.RouteTest$$anonfun$check$1.apply(RouteTest.scala:55)
	at spray.testkit.RouteTest$$anonfun$check$1.apply(RouteTest.scala:55)
	at spray.testkit.RouteResultComponent$RouteResult.$tilde$greater(RouteResultComponent.scala:113)
	at com.example.MyServiceSpec$$anonfun$1$$anonfun$apply$2.apply(MyServiceSpec.scala:14)
	at com.example.MyServiceSpec$$anonfun$1$$anonfun$apply$2.apply(MyServiceSpec.scala:14)
</failure>
                                               </testcase><testcase classname="com.example.MyServiceSpec" name="(It is not a test)" time="-0.001">
                                                 
                                               </testcase><testcase classname="com.example.MyServiceSpec" name="(It is not a test)" time="-0.001">
                                                 
                                               </testcase>
                     <system-out></system-out>
                     <system-err></system-err>
                   </testsuite>